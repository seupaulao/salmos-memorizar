----Summary----

In Emacs, editing takes place in buffers.
To switch to a buffer, use C-x b and enter the buffer name in the minibuffer.
To create a new buffer, use C-x b and enter a new buffer name.
To open a file, use C-x C-f and navigate to the file.
To save a buffer to a file, use C-x C-s.
To create a new file, use C-x C-f and enter the new file’s path. When you save the buffer, Emacs will create the file on the filesystem.

M-x function-name                 executa uma função

M-x clojure-mode                  alterna pra o modo clojure-mode
M-x major-mode                    alterna pra o modo major-mode

M-x package-list-packages         mostra quase todos os pacotes disponiveis
M-x package-refresh-contents 
M-x package-install               instala um pacote

Keys	Description
C-a	Move to beginning of line.
M-m	Move to first non-whitespace character on the line.
C-e	Move to end of line.
C-f	Move forward one character.
C-b	Move backward one character.
M-f	Move forward one word (I use this a lot).
M-b	Move backward one word (I use this a lot, too).
C-s	Regex search for text in current buffer and move to it. Press C-s again to move to next match.
C-r	Same as C-s, but search in reverse.
M-<	Move to beginning of buffer.
M->	Move to end of buffer.
M-g g	Go to line.

C-spc   criar uma região

M-x replace-string

Keys	Description
C-w	Kill region.
M-w	Copy region to kill ring.
C-y	Yank.
M-y	Cycle through kill ring after yanking.
M-d	Kill word.
C-k	Kill line.

Keys                    Description
Tab                     Indent line.
C-j                     New line and indent, equivalent to enter followed by tab.
M-/	                Hippie expand; cycles through possible expansions of the text before point.
M-\	                Delete all spaces and tabs around point. (I use this one a lot.)
C-h k key-binding	Describe the function bound to the key binding. To get this to work, you actually perform the key sequence after typing C-h k.
C-h f	                Describe function.

Windows and Frames

C-x o	Switch cursor to another window. Try this now to switch between your Clojure file and the REPL.
C-x 1	Delete all other windows, leaving only the current window in the frame. This doesn’t close your buffers, and it won’t cause you to lose any work.
C-x 2	Split frame above and below.
C-x 3	Split frame side by side.
C-x 0	Delete current window.

Use C-x 3 to split the window side by side again.
Use C-x o to switch to the right window.
Use C-x b *cider-repl* to switch to the CIDER buffer in the right window.

Table 2-6: Clojure Buffer Key Bindings

Keys	           Description
C-c M-n M-n	   Switch to namespace of current buffer.
C-x C-e	           Evaluate expression immediately preceding point.
C-c C-k	           Compile current buffer.
C-c C-d C-d	   Display documentation for symbol under point.
M-. and M-,	   Navigate to source code for symbol under point and return to your original buffer.
C-c C-d C-a	   Apropros search; find arbitrary text across function names and documentation.

Table 2-7: CIDER Buffer Key Bindings

Keys	         Description
C-↑, C-↓	 Cycle through REPL history.
C-enter	         Close parentheses and evaluate.


Cider and REPL

1. inicie o REPL
2. M-x cider-jack-in   This starts the REPL and creates a new buffer where you can interact with it



Gerenciando erros

In this section, you’ll write some buggy code so you can see how Emacs responds to it and how you can recover from the error and continue on your merry way. You’ll do this in both the REPL buffer and the core.clj buffer. Let’s start with the REPL. At the prompt, type (map) and press enter.

Clojure’s stack traces can be difficult to decipher when you’re just starting, but after a while you’ll learn to get useful information from them. CIDER gives you a hand by allowing you to filter stack traces, which reduces noise so you can zero in on the cause of your exception. Line 2 of the *cider-error* buffer has the filters Clojure, Java, REPL, Tooling, Duplicates, and All. You can click each option to activate that filter. You can also click each stack trace line to jump to the corresponding source code.

Here’s how to close the stack trace in the left window:

Use C-x o to switch to the window.
Press q to close the stack trace and go back to CIDER.
If you want to view the error again, you can switch to the *cider-error* buffer. You can also get error messages when trying to compile files. To see this, go to the core.clj buffer, write some buggy code, and compile:

Add (map) to the end.
Use C-c C-k to compile.
You should see a *cider-error* buffer similar to the one you saw earlier. Again, press q to close the stack trace.

